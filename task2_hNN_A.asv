%
% Versin 0.9  (HS 06/03/2020)
%
function [Y] = task2_hNN_A(X)
% Input:
%  X : N-by-D matrix of input vectors (in row-wise) (double)
% Output:
%  Y : N-by-1 vector of output (double)
[N,~] = size(X);
Y = zeros(N,1);

polyA =[1.89311,4.03806;
        1.53486,3.71794;
        2.13083,2.98602;
        2.59935,3.57138];
weights = task2_find_hNN_A_weights(polyA); %weight vectors for first layer

YneurOut = zeros(N,length(weights));
for i = 1:length(weights) %1st hidden layer
    neuronOUT = task2_hNeuron(weights(i,:),X)
    
    YneurOut(:,i) = neuronOUT;
end

weights = [-1 1 1]; %fixed weight vector for second layer(inp.s are 1 or 0) 
for k = 1:N/2
    ind1 = k*2 -1;
    ind2 = k*2;
    
    xINP = YneurOut(:,(ind1:ind2));
    neuronOUT = task2_hNeuron(weights,xINP); 
end
end
